client - pobaruva resurs na internet od serverot
server - go opsluzuva toj klient

// HTTP/HTTPS

REST (Representational State Transfer) - arhitektonski principi i granici sto ni davaat
standardiziran nacin na dizajniranje na aplikacii na internetot

GET
http://google.com/fetchResources

POST
http://google.com/addResources
...

GET + POST
http://google.com/users

GRAPHQL
http://google.com
//Tuka imame dodatni queries sto ke treba da gi pisuvame vo zavisnost od toa sto sakame da go napravime

// Design patterns (Semi na dizajn) - sledat nekoi ograncuvanja, i na koj nacin ke se organizira i koristi kodot
Vidovi semi na dizajn:

    1. Singleton Patterns:
        - Factory Method Pattern - ke koristite glavno factory methods (OOP)
        - Abstract factory pattern - ke koristite glavno metodi od abstraktni klasi (OOP)
        Primer: Abstraktna klasa VEHICLE(vozilo) sto ke mi sluzi kako osnova
        Od taa abstraktna klasa sto mi sluzi kako osnova ke si napravam drugi podklasi kako sto se Car, Boat, Plane itn itn...

    2. Structural Patterns:
        - Decorator Pattern - Koga ke napravite object(class), na toj objekt treba dinamicno da mu se zadavaat odgovornosti i specifikacii

    3. Behavioral Patterns:
        - Observer Pattern - definira one-to-many zavisnosti megu objekti, odnosno toa vi znaci stom eden objekt se promeni,
        site drugir objekti zavisni od nego se izvesteni za toa i se prilagoduvaat avtomatski

    4. Arhitectural Patterns:
        - MVC (Model - View - Controller ) - separate application into three interconnected components

    5. Concurency Patterns:
        - Mutex Patterns - ni ovozmozuva ekskluziven pristap do nekoj resusrs (samo odredeni korisnici mozat da koristat
        na odreden nacin nekoj resurs)


### API (Applicaton Programming Interface) - rabotata na API e da razmenuva podatoci pomegu aplikacii, sistemi i uredi
API vi e kako dogovor kade sto e definirano kakva interakcija ke imaat softverskite komponenti pomegu sebe.

### RESTFULL API (koristi HTTP/HTTPS protokol i gi sledi principite na REST) - ovozmozuva komunikacija na softverskite komponenti

### Web servisi - komunikacija na klient/server preku internet (HTTP/HTTPS)
Web servisite vi se specificna implementacija na API koja ni ovozmozuva komunikacija preku internet ili mreza

Primer za web servis: GET, POST, PUT, PATCH i DELETE metodite, avtentikacija i avtorizacija, enkriptiranje passwords itn itn...

// REST koristi client-server arhitektura

    - Statlesness - sekoj HTTP request treba vo sebe da gi sodrzi site informacii potrebni za kominkacijata
    client-server da moze da go razbere i procesira istiot request
    Vo prevod, serverot ne moze da racuna na prethodni reqesti, ne gi zacuvuva prethodnite requesti.
    Sekoj request e nezavisen i independent.

    - Caching - toa vi e sekoj proces na zacuvuvanje i odnovo koristenje na prethodno koristena ili izracunata
    vrednost se so cel da se podobri efikasnosta i izvedbata na eden sistem.

Summary: I statlesness i caching vi se glavni koncepti za web development.
Statlesness ima pogolema scalabilnost i toleancija za greski.
Caching po default e po efikasen, megutoa podatocite sto se zacuvani (cached) mozat da zastarat i so toa
da napravat problem, ili uste poloso, da bidat zloupotrebeni, so caching treba poveke vnimavanje.